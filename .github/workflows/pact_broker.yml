name: Pact Broker Setup with Consumer and Provider on AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy and Test Pact Broker, Consumer, and Provider on AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Ensure ECS Cluster Exists
        run: |
          CLUSTER_NAME="my-cluster"
          if ! aws ecs describe-clusters --clusters $CLUSTER_NAME --query "clusters[*].clusterName" --output text | grep -q $CLUSTER_NAME; then
            echo "ECS cluster does not exist. Creating..."
            aws ecs create-cluster --cluster-name $CLUSTER_NAME
          else
            echo "ECS cluster exists."
          fi

      - name: Force Logout and Login to Amazon ECR
        run: |
          docker logout 727646472452.dkr.ecr.us-east-1.amazonaws.com || true
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 727646472452.dkr.ecr.us-east-1.amazonaws.com

      - name: Verify ECR Repositories Exist
        run: |
          for repo in pact-broker consumer provider; do
            aws ecr describe-repositories --repository-names $repo || aws ecr create-repository --repository-name $repo
          done

      - name: Verify Required Directories Exist
        run: |
          for dir in ./pact-broker ./consumer ./provider; do
            test -d $dir || (echo "Error: $dir directory not found" && exit 1)
          done

      - name: Build and Push Docker Images
        run: |
          for service in pact-broker consumer provider; do
            docker build -t $service ./$service || (echo "Failed to build $service image" && exit 1)
            docker tag $service:latest 727646472452.dkr.ecr.us-east-1.amazonaws.com/$service:latest
            docker push 727646472452.dkr.ecr.us-east-1.amazonaws.com/$service:latest
          done

      - name: Ensure ECS Services Exist
        run: |
          ensure_service() {
            SERVICE_NAME=$1
            TASK_DEFINITION=$1
            if ! aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query "taskDefinition.taskDefinitionArn" --output text &> /dev/null; then
              echo "Task definition $TASK_DEFINITION not found. Registering..."
              aws ecs register-task-definition --family $TASK_DEFINITION \
                --execution-role-arn arn:aws:iam::727646472452:role/ecsTaskExecutionRole \
                --network-mode awsvpc \
                --requires-compatibilities FARGATE \
                --cpu "256" \
                --memory "512" \
                --container-definitions '[{"name":"'$TASK_DEFINITION'","image":"727646472452.dkr.ecr.us-east-1.amazonaws.com/'$TASK_DEFINITION':latest","memory":512,"cpu":256,"essential":true,"networkMode":"awsvpc"}]'
            fi
            if ! aws ecs describe-services --cluster my-cluster --services $SERVICE_NAME --query "services[*].serviceName" --output text | grep -q $SERVICE_NAME; then
              echo "$SERVICE_NAME service does not exist. Creating..."
              aws ecs create-service --cluster my-cluster --service-name $SERVICE_NAME \
                --task-definition $TASK_DEFINITION --desired-count 1 --launch-type FARGATE \
                --network-configuration "awsvpcConfiguration={subnets=[subnet-abc123,subnet-def456],securityGroups=[sg-xyz789],assignPublicIp=ENABLED}"
            else
              echo "$SERVICE_NAME service exists."
            fi
          }
          ensure_service pact-broker
          ensure_service consumer
          ensure_service provider

      - name: Deploy Services on AWS ECS
        run: |
          for service in pact-broker consumer provider; do
            aws ecs update-service --cluster my-cluster --service $service --force-new-deployment
          done

      - name: Wait for Services to Start
        run: sleep 60

      - name: Verify Services are Running
        run: |
          for service in pact-broker consumer provider; do
            curl -f http://$service.my-domain.com || (echo "$service service failed to start" && exit 1)
          done

      - name: Run Consumer Pact Tests
        run: docker run --rm 727646472452.dkr.ecr.us-east-1.amazonaws.com/consumer npm test

      - name: Publish Pact Contracts to Pact Broker
        run: |
          docker run --rm 727646472452.dkr.ecr.us-east-1.amazonaws.com/consumer npx pact-cli publish /pacts \
            --consumer-app-version=$(git rev-parse --short HEAD) \
            --broker-base-url=http://pact-broker.my-domain.com

      - name: Run Provider Verification Against Pact Broker
        run: docker run --rm 727646472452.dkr.ecr.us-east-1.amazonaws.com/provider npm test

      - name: Cleanup Old Docker Images
        if: always()
        run: |
          for repo in pact-broker consumer provider; do
            aws ecr batch-delete-image --repository-name $repo --image-ids imageTag=old-tag
          done

      - name: Output Service URLs
        run: |
          for service in pact-broker consumer provider; do
            echo "$service Service is running at http://$service.my-domain.com"
          done
