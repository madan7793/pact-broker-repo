name: Pact Broker Setup with Consumer and Provider on AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy and Test Pact Broker, Consumer, and Provider on AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Ensure ECS Cluster Exists
        run: |
          CLUSTER_NAME="my-cluster"
          if ! aws ecs describe-clusters --clusters $CLUSTER_NAME --query "clusters[*].clusterName" --output text | grep -q $CLUSTER_NAME; then
            echo "ECS cluster does not exist. Creating..."
            aws ecs create-cluster --cluster-name $CLUSTER_NAME
          else
            echo "ECS cluster exists."
          fi

      - name: Force Logout and Login to Amazon ECR
        run: |
          docker logout 727646472452.dkr.ecr.us-east-1.amazonaws.com || true
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 727646472452.dkr.ecr.us-east-1.amazonaws.com

      - name: Verify ECR Repositories Exist
        run: |
          aws ecr describe-repositories --repository-names pact-broker || aws ecr create-repository --repository-name pact-broker
          aws ecr describe-repositories --repository-names consumer-service || aws ecr create-repository --repository-name consumer-service
          aws ecr describe-repositories --repository-names provider-service || aws ecr create-repository --repository-name provider-service

      - name: Verify Required Directories Exist
        run: |
          test -d ./pact-broker || (echo "Error: ./pact-broker directory not found" && exit 1)
          test -d ./consumer || (echo "Error: ./consumer directory not found" && exit 1)
          test -d ./provider || (echo "Error: ./provider directory not found" && exit 1)

      - name: Build and Push Docker Images
        run: |
          docker build -t pact-broker ./pact-broker || (echo "Failed to build pact-broker image" && exit 1)
          docker tag pact-broker:latest 727646472452.dkr.ecr.us-east-1.amazonaws.com/pact-broker:latest
          docker push 727646472452.dkr.ecr.us-east-1.amazonaws.com/pact-broker:latest

          docker build -t consumer-service ./consumer || (echo "Failed to build consumer-service image" && exit 1)
          docker tag consumer-service:latest 727646472452.dkr.ecr.us-east-1.amazonaws.com/consumer-service:latest
          docker push 727646472452.dkr.ecr.us-east-1.amazonaws.com/consumer-service:latest

          docker build -t provider-service ./provider || (echo "Failed to build provider-service image" && exit 1)
          docker tag provider-service:latest 727646472452.dkr.ecr.us-east-1.amazonaws.com/provider-service:latest
          docker push 727646472452.dkr.ecr.us-east-1.amazonaws.com/provider-service:latest

      - name: Ensure ECS Services Exist
        run: |
          ensure_service() {
            SERVICE_NAME=$1
            if ! aws ecs describe-services --cluster my-cluster --services $SERVICE_NAME --query "services[*].serviceName" --output text | grep -q $SERVICE_NAME; then
              echo "$SERVICE_NAME service does not exist. Creating..."
              aws ecs create-service --cluster my-cluster --service-name $SERVICE_NAME --task-definition $SERVICE_NAME --desired-count 1 --launch-type FARGATE
            else
              echo "$SERVICE_NAME service exists."
            fi
          }
          ensure_service pact-broker
          ensure_service consumer-service
          ensure_service provider-service

      - name: Deploy Services on AWS ECS
        run: |
          aws ecs update-service --cluster my-cluster --service pact-broker --force-new-deployment
          aws ecs update-service --cluster my-cluster --service consumer-service --force-new-deployment
          aws ecs update-service --cluster my-cluster --service provider-service --force-new-deployment

      - name: Wait for Services to Start
        run: sleep 60

      - name: Verify Pact Broker is Running
        run: curl -f http://pact-broker.my-domain.com || (echo "Pact Broker failed to start" && exit 1)

      - name: Verify Consumer Service is Running
        run: curl -f http://consumer.my-domain.com || (echo "Consumer service failed to start" && exit 1)

      - name: Verify Provider Service is Running
        run: curl -f http://provider.my-domain.com || (echo "Provider service failed to start" && exit 1)

      - name: Run Consumer Pact Tests
        run: docker run --rm 727646472452.dkr.ecr.us-east-1.amazonaws.com/consumer-service npm test

      - name: Publish Pact Contracts to Pact Broker
        run: |
          docker run --rm 727646472452.dkr.ecr.us-east-1.amazonaws.com/consumer-service npx pact-cli publish /pacts \
            --consumer-app-version=$(git rev-parse --short HEAD) \
            --broker-base-url=http://pact-broker.my-domain.com

      - name: Run Provider Verification Against Pact Broker
        run: docker run --rm 727646472452.dkr.ecr.us-east-1.amazonaws.com/provider-service npm test

      - name: Cleanup Old Docker Images
        if: always()
        run: |
          aws ecr batch-delete-image --repository-name pact-broker --image-ids imageTag=old-tag
          aws ecr batch-delete-image --repository-name consumer-service --image-ids imageTag=old-tag
          aws ecr batch-delete-image --repository-name provider-service --image-ids imageTag=old-tag

      - name: Output Service URLs
        run: |
          echo "Pact Broker is running at http://pact-broker.my-domain.com"
          echo "Consumer Service is running at http://consumer.my-domain.com"
          echo "Provider Service is running at http://provider.my-domain.com"
